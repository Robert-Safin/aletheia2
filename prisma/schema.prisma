// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}



model VenuePhoto {
  id        Int      @id @default(autoincrement())
  cloudinaryPublicId String
  cloudinaryUrl String

  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  @@index([venueId], name: "venueId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SingleEventPhoto {
  id        Int      @id @default(autoincrement())
  cloudinaryPublicId String
  cloudinaryUrl String

  singleEventId   Int
  singleEvent     SingleEvent    @relation(fields: [singleEventId], references: [id])
  @@index([singleEventId], name: "singleEventId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MultipleEventPhoto {
  id        Int      @id @default(autoincrement())
  cloudinaryPublicId String
  cloudinaryUrl String

  multipleEventId   Int
  multipleEvent     MultipleEvent    @relation(fields: [multipleEventId], references: [id])
  @@index([multipleEventId], name: "multipleEventId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SingleOfferPhoto {
  id        Int      @id @default(autoincrement())
  cloudinaryPublicId String
  cloudinaryUrl String

  singleOfferId   Int
  singleOffer     SingleOffer    @relation(fields: [singleOfferId], references: [id])
  @@index([singleOfferId], name: "singleOfferId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MultipleOfferPhoto {
  id        Int      @id @default(autoincrement())
  cloudinaryPublicId String
  cloudinaryUrl String

  multipleOfferId   Int
  multipleOffer     MultipleOffer    @relation(fields: [multipleOfferId], references: [id])
  @@index([multipleOfferId], name: "multipleOfferId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id        Int      @id @default(autoincrement())
  clerkId   String
  name      String
  googlePlaceId String
  description String? @db.Text
  formattedAdress String? @db.Text
  formattedPhoneNumber String?
  website String?
  googleMapsUrl String
  openingHours String? @db.Text
  categories String?
  averageRating Float
  totalReviews Int
  latitude Float
  longitude Float


  venuePhotos    VenuePhoto[]
  singleEvents SingleEvent[]
  multipleEvents MultipleEvent[]
  singleOffers SingleOffer[]
  multipleOffers MultipleOffer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model SingleEvent {
  id        Int      @id @default(autoincrement())


  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  @@index([venueId], name: "venueId")

  singleEventPhoto SingleEventPhoto[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MultipleEvent {
  id        Int      @id @default(autoincrement())


  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  @@index([venueId], name: "venueId")

  multipleEventPhoto MultipleEventPhoto[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SingleOffer {
  id        Int      @id @default(autoincrement())


  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  @@index([venueId], name: "venueId")

  singleOfferPhoto SingleOfferPhoto[]



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MultipleOffer {
  id        Int      @id @default(autoincrement())


  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  @@index([venueId], name: "venueId")

  multipleOfferPhoto MultipleOfferPhoto[]



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
